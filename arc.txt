# Проект маркетплейса: FastAPI + React + PostgreSQL

## 📁 Структура проекта

```
marketplace/
├── backend/                 # FastAPI приложение
│   ├── app/
│   │   ├── __init__.py
│   │   ├── main.py         # Основной файл приложения
│   │   ├── config.py       # Конфигурация
│   │   ├── database.py     # Подключение к БД
│   │   ├── models/         # SQLAlchemy модели
│   │   │   ├── __init__.py
│   │   │   ├── user.py
│   │   │   ├── product.py
│   │   │   ├── order.py
│   │   │   └── category.py
│   │   ├── schemas/        # Pydantic схемы
│   │   │   ├── __init__.py
│   │   │   ├── user.py
│   │   │   ├── product.py
│   │   │   └── order.py
│   │   ├── api/            # API роуты
│   │   │   ├── __init__.py
│   │   │   ├── auth.py
│   │   │   ├── users.py
│   │   │   ├── products.py
│   │   │   └── orders.py
│   │   ├── core/           # Основная логика
│   │   │   ├── __init__.py
│   │   │   ├── security.py
│   │   │   └── utils.py
│   │   └── migrations/     # Alembic миграции
│   ├── requirements.txt
│   ├── alembic.ini
│   └── .env
├── frontend/               # React приложение
│   ├── public/
│   ├── src/
│   │   ├── components/     # Переиспользуемые компоненты
│   │   │   ├── Header/
│   │   │   ├── Footer/
│   │   │   ├── ProductCard/
│   │   │   └── CartItem/
│   │   ├── pages/          # Страницы
│   │   │   ├── Home/
│   │   │   ├── ProductList/
│   │   │   ├── ProductDetail/
│   │   │   ├── Cart/
│   │   │   ├── Profile/
│   │   │   └── Auth/
│   │   ├── hooks/          # Custom hooks
│   │   ├── services/       # API сервисы
│   │   ├── store/          # State management
│   │   ├── utils/
│   │   ├── App.js
│   │   └── index.js
│   ├── package.json
│   └── .env
├── docker-compose.yml      # Для разработки
└── README.md
```

## 🗄️ База данных (PostgreSQL)

### Основные таблицы:

**Users** - пользователи (покупатели и продавцы)
- id, email, password_hash, first_name, last_name, role, created_at, updated_at

**Categories** - категории товаров
- id, name, description, parent_id (для подкатегорий)

**Products** - товары
- id, title, description, price, stock_quantity, seller_id, category_id, images, created_at, updated_at

**Orders** - заказы
- id, buyer_id, total_amount, status, created_at, updated_at

**Order_Items** - товары в заказе
- id, order_id, product_id, quantity, price

**Reviews** - отзывы
- id, product_id, user_id, rating, comment, created_at

### Технологии Backend:
- **FastAPI** - основной фреймворк
- **SQLAlchemy** - ORM
- **Alembic** - миграции БД
- **Pydantic** - валидация данных
- **JWT** - аутентификация
- **Bcrypt** - хеширование паролей
- **pytest** - тестирование

### Технологии Frontend:
- **React 18** - библиотека UI
- **React Router** - маршрутизация
- **React Query/TanStack Query** - управление состоянием сервера
- **Zustand/Redux Toolkit** - глобальное состояние
- **Material-UI/Tailwind CSS** - стили
- **React Hook Form** - работа с формами
- **Axios** - HTTP клиент

## 🚀 Основные функции маркетплейса

### Для покупателей:
- Просмотр каталога товаров
- Поиск и фильтрация
- Корзина покупок
- Оформление заказов
- История покупок
- Отзывы и рейтинги

### Для продавцов:
- Регистрация как продавец
- Добавление товаров
- Управление инвентарем
- Обработка заказов
- Аналитика продаж

### Общие функции:
- Аутентификация и авторизация
- Профили пользователей
- Система уведомлений
- Чат между покупателем и продавцом

## 🔒 Безопасность

- JWT токены для аутентификации
- Валидация данных на клиенте и сервере
- Rate limiting для API
- HTTPS в продакшене
- Хеширование паролей
- Санитизация пользовательского ввода

## 📦 Deployment

### Docker Compose для разработки:
```yaml
version: '3.8'
services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: marketplace
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/marketplace

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  postgres_data:
```

### Для продакшена:
- **Backend**: Heroku, DigitalOcean, AWS
- **Frontend**: Vercel, Netlify, AWS S3 + CloudFront
- **База данных**: PostgreSQL на облачном провайдере
- **Файлы**: AWS S3, Cloudinary для изображений

## 📋 План разработки

### Этап 1 (MVP):
1. Настройка окружения
2. Базовая аутентификация
3. CRUD для товаров
4. Простой каталог
5. Базовая корзина

### Этап 2:
1. Система заказов
2. Профили пользователей
3. Поиск и фильтры
4. Загрузка изображений

### Этап 3:
1. Отзывы и рейтинги
2. Панель продавца
3. Уведомления
4. Аналитика

### Этап 4:
1. Платежная система
2. Чат
3. Мобильная адаптация
4. Оптимизация производительности