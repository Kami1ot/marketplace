# app/main.py
from fastapi import FastAPI, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from sqlalchemy import text

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ë–î
from app.database import engine, Base, get_db
from app.api import auth, products, admin  # –î–æ–±–∞–≤–ª–µ–Ω admin

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
app = FastAPI(
    title="Marketplace API",
    description="""
    üõí **–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å API —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π**
    
    ## –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
    
    * üë§ **USER** - –ú–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    * üè¢ **BUSINESS** - –ú–æ–∂–µ—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã + –≤—Å–µ –ø—Ä–∞–≤–∞ USER
    * üëë **ADMIN** - –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    
    ## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    
    * üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
    * üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–µ–π
    * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    * üîÑ –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
    
    ## –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã:
    
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞
    3. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã!
    """,
    version="2.0.0",
    contact={
        "name": "Marketplace Support",
        "email": "support@marketplace.com",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
app.include_router(
    auth.router, 
    prefix="/api/auth", 
    tags=["üîê Authentication"],
    responses={404: {"description": "Not found"}}
)

app.include_router(
    products.router, 
    prefix="/api/products", 
    tags=["üõçÔ∏è Products"],
    responses={404: {"description": "Not found"}}
)

app.include_router(
    admin.router, 
    prefix="/api/admin", 
    tags=["üëë Admin Panel"],
    responses={
        401: {"description": "Authentication required"},
        403: {"description": "Admin access required"},
        404: {"description": "Not found"}
    }
)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –º–æ–¥–µ–ª–∏ –∑–¥–µ—Å—å
    from app.models.user import User, UserRole
    from app.models.category import Category
    from app.models.product import Product
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    Base.metadata.create_all(bind=engine)
    print("üìä –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã!")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    from app.core.security import get_password_hash
    from sqlalchemy.orm import sessionmaker
    
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω
        admin = db.query(User).filter(User.role == UserRole.ADMIN).first()
        if not admin:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            admin_user = User(
                email="admin@marketplace.com",
                hashed_password=get_password_hash("admin123"),
                first_name="Super",
                last_name="Admin",
                role=UserRole.ADMIN
            )
            db.add(admin_user)
            db.commit()
            print("üëë –°–æ–∑–¥–∞–Ω —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω: admin@marketplace.com / admin123")
        else:
            print("üëë –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞: {e}")
    finally:
        db.close()

@app.get("/", tags=["üè† General"])
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "üõí Marketplace API v2.0 - Role-Based E-commerce Platform",
        "version": "2.0.0",
        "features": {
            "authentication": "JWT-based secure authentication",
            "roles": {
                "USER": "Browse products and categories",
                "BUSINESS": "Sell products + USER privileges", 
                "ADMIN": "Full platform management"
            },
            "products": "Full CRUD with image support",
            "categories": "Hierarchical organization",
            "soft_delete": "Safe deactivation instead of permanent deletion"
        },
        "endpoints": {
            "docs": "/docs",
            "admin": "/api/admin/*",
            "auth": "/api/auth/*",
            "products": "/api/products/*"
        }
    }

@app.get("/health", tags=["üè† General"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "‚úÖ healthy", 
        "version": "2.0.0",
        "database": "connected",
        "auth": "enabled",
        "roles": "active"
    }

@app.get("/test-db", tags=["üè† General"])
async def test_database(db: Session = Depends(get_db)):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app.models.user import User, UserRole
        from app.models.product import Product
        
        result = db.execute(text("SELECT version();")).fetchone()
        
        user_count = db.query(User).count()
        product_count = db.query(Product).count()
        admin_count = db.query(User).filter(User.role == UserRole.ADMIN).count()
        business_count = db.query(User).filter(User.role == UserRole.BUSINESS).count()
        
        return {
            "status": "‚úÖ database connected",
            "postgresql_version": result[0][:50] + "...",
            "statistics": {
                "total_users": user_count,
                "total_products": product_count,
                "admin_users": admin_count,
                "business_users": business_count,
                "regular_users": user_count - admin_count - business_count
            },
            "features": {
                "role_system": "‚úÖ enabled",
                "soft_delete": "‚úÖ enabled",
                "admin_panel": "‚úÖ enabled"
            }
        }
        
    except Exception as e:
        return {
            "status": "‚ùå database error", 
            "error": str(e)
        }

@app.get("/create-test-data", tags=["üè† General"])
async def create_test_data(db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from app.models.user import User, UserRole
        from app.models.category import Category
        from app.models.product import Product
        from app.core.security import get_password_hash
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        existing_data = db.query(Category).first()
        if existing_data:
            return {
                "message": "‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç",
                "accounts": {
                    "admin": "admin@marketplace.com / admin123",
                    "business": "business@test.com / password", 
                    "user": "user@test.com / password"
                }
            }
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_data = [
            {
                "email": "user@test.com",
                "password": "password",
                "first_name": "John",
                "last_name": "Doe",
                "role": UserRole.USER
            },
            {
                "email": "business@test.com", 
                "password": "password",
                "first_name": "Jane",
                "last_name": "Seller",
                "role": UserRole.BUSINESS
            }
        ]
        
        test_users = []
        for user_data in users_data:
            existing_user = db.query(User).filter(User.email == user_data["email"]).first()
            if not existing_user:
                user = User(
                    email=user_data["email"],
                    hashed_password=get_password_hash(user_data["password"]),
                    first_name=user_data["first_name"],
                    last_name=user_data["last_name"],
                    role=user_data["role"]
                )
                db.add(user)
                test_users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories_data = [
            {"name": "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "description": "–¢–µ–ª–µ—Ñ–æ–Ω—ã, –Ω–æ—É—Ç–±—É–∫–∏, –ø–ª–∞–Ω—à–µ—Ç—ã"},
            {"name": "üëï –û–¥–µ–∂–¥–∞", "description": "–ú—É–∂—Å–∫–∞—è –∏ –∂–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞"},
            {"name": "üè† –î–æ–º –∏ —Å–∞–¥", "description": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞ –∏ –¥–∞—á–∏"},
            {"name": "üìö –ö–Ω–∏–≥–∏", "description": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"},
        ]
        
        categories = []
        for cat_data in categories_data:
            category = Category(**cat_data)
            db.add(category)
            categories.append(category)
        
        db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∏–∑–Ω–µ—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        business_user = db.query(User).filter(User.email == "business@test.com").first()
        
        if business_user:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            products_data = [
                {
                    "title": "üì± iPhone 15 Pro",
                    "description": "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º",
                    "price": 99999.99,
                    "stock_quantity": 10,
                    "category_id": categories[0].id,
                    "images": ["iphone15.jpg", "iphone15_back.jpg"]
                },
                {
                    "title": "üëî –†—É–±–∞—à–∫–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è",
                    "description": "100% —Ö–ª–æ–ø–æ–∫, —Ä–∞–∑–º–µ—Ä—ã S-XL, –±–µ–ª—ã–π —Ü–≤–µ—Ç",
                    "price": 2999.99,
                    "stock_quantity": 50,
                    "category_id": categories[1].id,
                    "images": ["shirt_white.jpg"]
                },
                {
                    "title": "ü™ë –û—Ñ–∏—Å–Ω–æ–µ –∫—Ä–µ—Å–ª–æ",
                    "description": "–≠—Ä–≥–æ–Ω–æ–º–∏—á–Ω–æ–µ –∫—Ä–µ—Å–ª–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã, —Ä–µ–≥—É–ª–∏—Ä—É–µ–º–∞—è –≤—ã—Å–æ—Ç–∞",
                    "price": 15999.99,
                    "stock_quantity": 5,
                    "category_id": categories[2].id,
                    "images": ["office_chair.jpg"]
                },
                {
                    "title": "üìñ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
                    "description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python",
                    "price": 1499.99,
                    "stock_quantity": 25,
                    "category_id": categories[3].id,
                    "images": ["python_book.jpg"]
                }
            ]
            
            for prod_data in products_data:
                product = Product(**prod_data, seller_id=business_user.id)
                db.add(product)
        
        db.commit()
        
        return {
            "message": "üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
            "created": {
                "categories": len(categories_data),
                "products": len(products_data) if business_user else 0,
                "test_users": len(test_users)
            },
            "test_accounts": {
                "üëë admin": "admin@marketplace.com / admin123",
                "üè¢ business": "business@test.com / password",
                "üë§ user": "user@test.com / password"
            },
            "next_steps": [
                "1. –í–æ–π–¥–∏—Ç–µ –≤ /docs –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API",
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π",
                "3. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ Admin Panel"
            ]
        }
        
    except Exception as e:
        return {"status": "‚ùå error", "error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)