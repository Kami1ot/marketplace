# app/init_db.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from typing import List
from sqlalchemy.orm import Session
from sqlalchemy import text
from datetime import datetime, timedelta
import random

from app.database import engine, Base, SessionLocal
from app.models import *
from app.core.security import get_password_hash
from app.models import (
    Store, StoreStats, StoreStatus, VerificationStatus,
    AttributeDefinition, AttributeValue, AttributeType,
    CategoryAttribute, Product, ProductVariant, ProductAttribute,
    ProductStatus, ProductVisibility
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("Creating database tables...")
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Tables created!")

def drop_db():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
    logger.warning("Dropping all tables...")
    Base.metadata.drop_all(bind=engine)
    logger.info("‚úÖ All tables dropped!")

def reset_db():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.warning("Resetting database...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    drop_db()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    init_db()
    
    logger.info("‚úÖ Database reset complete!")

def create_test_users(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("Creating test users...")
    
    users = [
        {
            "email": "admin@example.com",
            "password": "admin123",
            "first_name": "Admin",
            "last_name": "User",
            "role": UserRole.ADMIN,
            "email_verified": True
        },
        {
            "email": "seller@example.com", 
            "password": "seller123",
            "first_name": "Test",
            "last_name": "Seller",
            "role": UserRole.SELLER,
            "email_verified": True
        },
        {
            "email": "buyer@example.com",
            "password": "buyer123", 
            "first_name": "Test",
            "last_name": "Buyer",
            "role": UserRole.CUSTOMER,
            "email_verified": True
        }
    ]
    
    created_users = []
    for user_data in users:
        password = user_data.pop("password")
        user = User(**user_data)
        user.password_hash = get_password_hash(password)
        db.add(user)
        created_users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile(
            user=user,
            bio=f"I am a {user.role.value}",
            language="ru"
        )
        db.add(profile)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if user.role == UserRole.CUSTOMER:
            address = UserAddress(
                user=user,
                type=AddressType.BOTH,
                label="–î–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å",
                country="–†–æ—Å—Å–∏—è",
                city="–ú–æ—Å–∫–≤–∞",
                street="—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è",
                building="1",
                postal_code="101000",
                is_default=True
            )
            db.add(address)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(created_users)} users")
    return created_users

def create_test_categories(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info("Creating test categories...")
    
    categories_data = [
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "slug": "electronics", "icon_url": "üì±"},
        {"name": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", "slug": "clothing", "icon_url": "üëï"},
        {"name": "–î–æ–º –∏ —Å–∞–¥", "slug": "home-garden", "icon_url": "üè†"},
        {"name": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "slug": "beauty-health", "icon_url": "üíÑ"},
        {"name": "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö", "slug": "sport", "icon_url": "‚öΩ"},
        {"name": "–ö–Ω–∏–≥–∏", "slug": "books", "icon_url": "üìö"},
    ]
    
    categories = []
    for cat_data in categories_data:
        category = Category(**cat_data, is_active=True)
        db.add(category)
        categories.append(category)
    
    db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = [
        {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "slug": "smartphones", "parent_id": categories[0].id},
        {"name": "–ù–æ—É—Ç–±—É–∫–∏", "slug": "laptops", "parent_id": categories[0].id},
        {"name": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "slug": "mens-clothing", "parent_id": categories[1].id},
        {"name": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "slug": "womens-clothing", "parent_id": categories[1].id},
    ]
    
    for subcat_data in subcategories:
        subcategory = Category(**subcat_data, is_active=True)
        db.add(subcategory)
        categories.append(subcategory)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(categories)} categories")
    return categories

def create_test_brands(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
    logger.info("Creating test brands...")
    
    brands_data = [
        {"name": "Apple", "slug": "apple", "website": "https://apple.com"},
        {"name": "Samsung", "slug": "samsung", "website": "https://samsung.com"},
        {"name": "Nike", "slug": "nike", "website": "https://nike.com"},
        {"name": "Adidas", "slug": "adidas", "website": "https://adidas.com"},
        {"name": "Sony", "slug": "sony", "website": "https://sony.com"},
    ]
    
    brands = []
    for brand_data in brands_data:
        brand = Brand(**brand_data, is_active=True)
        db.add(brand)
        brands.append(brand)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(brands)} brands")
    return brands

def check_enum_values():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π enum"""
    logger.info("Checking enum values...")
    logger.info(f"UserRole values: {[role.value for role in UserRole]}")
    logger.info(f"UserStatus values: {[status.value for status in UserStatus]}")
    logger.info(f"AddressType values: {[addr_type.value for addr_type in AddressType]}")

def create_test_stores(db: Session, users: List[User]):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    logger.info("Creating test stores...")
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
    admin = next((u for u in users if u.email == "admin@example.com"), None)
    seller = next((u for u in users if u.email == "seller@example.com"), None)
    
    if not admin:
        logger.warning("Admin user not found")
        return []
    
    stores = []
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∞–¥–º–∏–Ω–∞
    admin_store = Store(
        owner_id=admin.id,
        name="Official Store",
        slug="official-store",
        description="–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
        status=StoreStatus.ACTIVE,
        verification_status=VerificationStatus.VERIFIED,
        contact_email="store@example.com",
        contact_phone="+7 999 123-45-67"
    )
    db.add(admin_store)
    db.flush()
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    admin_stats = StoreStats(store_id=admin_store.id)
    db.add(admin_stats)
    stores.append(admin_store)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–¥–∞–≤–µ—Ü, —Å–æ–∑–¥–∞–µ–º –∏ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω
    if seller:
        seller_store = Store(
            owner_id=seller.id,
            name="Test Seller Store",
            slug="test-seller-store",
            description="–ú–∞–≥–∞–∑–∏–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞",
            status=StoreStatus.ACTIVE,
            verification_status=VerificationStatus.VERIFIED
        )
        db.add(seller_store)
        db.flush()
        
        seller_stats = StoreStats(store_id=seller_store.id)
        db.add(seller_stats)
        stores.append(seller_store)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(stores)} stores")
    return stores

def create_test_attributes(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤"""
    logger.info("Creating test attributes...")
    
    attributes = []
    
    # –†–∞–∑–º–µ—Ä –¥–ª—è –æ–¥–µ–∂–¥—ã
    size_attr = AttributeDefinition(
        code="clothing_size",
        name="–†–∞–∑–º–µ—Ä",
        type=AttributeType.SELECT,
        is_required=True,
        is_filter=True,
        sort_order=1
    )
    db.add(size_attr)
    db.flush()
    attributes.append(size_attr)
    
    # –ó–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    size_values = [
        {"value": "xs", "display_name": "XS", "meta_data": {"eu_size": "40-42", "chest_cm": "86-89"}},
        {"value": "s", "display_name": "S", "meta_data": {"eu_size": "44-46", "chest_cm": "90-93"}},
        {"value": "m", "display_name": "M", "meta_data": {"eu_size": "48-50", "chest_cm": "94-97"}},
        {"value": "l", "display_name": "L", "meta_data": {"eu_size": "52-54", "chest_cm": "98-101"}},
        {"value": "xl", "display_name": "XL", "meta_data": {"eu_size": "56-58", "chest_cm": "102-105"}},
        {"value": "xxl", "display_name": "XXL", "meta_data": {"eu_size": "60-62", "chest_cm": "106-109"}}
    ]
    
    for i, size_data in enumerate(size_values):
        size_value = AttributeValue(
            attribute_id=size_attr.id,
            value=size_data["value"],
            display_name=size_data["display_name"],
            meta_data=size_data["meta_data"],
            sort_order=i,
            is_active=True
        )
        db.add(size_value)
    
    # –¶–≤–µ—Ç
    color_attr = AttributeDefinition(
        code="color",
        name="–¶–≤–µ—Ç",
        type=AttributeType.COLOR,
        is_required=True,
        is_filter=True,
        sort_order=2
    )
    db.add(color_attr)
    db.flush()
    attributes.append(color_attr)
    
    # –ó–Ω–∞—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    color_values = [
        {"value": "black", "display_name": "–ß–µ—Ä–Ω—ã–π", "meta_data": {"hex": "#000000", "rgb": "0,0,0"}},
        {"value": "white", "display_name": "–ë–µ–ª—ã–π", "meta_data": {"hex": "#FFFFFF", "rgb": "255,255,255"}},
        {"value": "gray", "display_name": "–°–µ—Ä—ã–π", "meta_data": {"hex": "#808080", "rgb": "128,128,128"}},
        {"value": "navy", "display_name": "–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π", "meta_data": {"hex": "#000080", "rgb": "0,0,128"}},
        {"value": "red", "display_name": "–ö—Ä–∞—Å–Ω—ã–π", "meta_data": {"hex": "#FF0000", "rgb": "255,0,0"}},
        {"value": "green", "display_name": "–ó–µ–ª–µ–Ω—ã–π", "meta_data": {"hex": "#00FF00", "rgb": "0,255,0"}}
    ]
    
    for i, color_data in enumerate(color_values):
        color_value = AttributeValue(
            attribute_id=color_attr.id,
            value=color_data["value"],
            display_name=color_data["display_name"],
            meta_data=color_data["meta_data"],
            sort_order=i,
            is_active=True
        )
        db.add(color_value)
    
    # –ú–∞—Ç–µ—Ä–∏–∞–ª
    material_attr = AttributeDefinition(
        code="material",
        name="–ú–∞—Ç–µ—Ä–∏–∞–ª",
        type=AttributeType.SELECT,
        is_required=False,
        is_filter=True,
        sort_order=3
    )
    db.add(material_attr)
    db.flush()
    attributes.append(material_attr)
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    material_values = [
        {"value": "cotton", "display_name": "–•–ª–æ–ø–æ–∫ 100%"},
        {"value": "cotton_poly", "display_name": "–•–ª–æ–ø–æ–∫/–ü–æ–ª–∏—ç—Å—Ç–µ—Ä"},
        {"value": "polyester", "display_name": "–ü–æ–ª–∏—ç—Å—Ç–µ—Ä"},
        {"value": "linen", "display_name": "–õ–µ–Ω"},
        {"value": "wool", "display_name": "–®–µ—Ä—Å—Ç—å"}
    ]
    
    for i, material_data in enumerate(material_values):
        material_value = AttributeValue(
            attribute_id=material_attr.id,
            value=material_data["value"],
            display_name=material_data["display_name"],
            sort_order=i,
            is_active=True
        )
        db.add(material_value)
    
    # –ü–æ–ª
    gender_attr = AttributeDefinition(
        code="gender",
        name="–ü–æ–ª",
        type=AttributeType.SELECT,
        is_required=False,
        is_filter=True,
        sort_order=4
    )
    db.add(gender_attr)
    db.flush()
    attributes.append(gender_attr)
    
    gender_values = [
        {"value": "male", "display_name": "–ú—É–∂—Å–∫–æ–π"},
        {"value": "female", "display_name": "–ñ–µ–Ω—Å–∫–∏–π"},
        {"value": "unisex", "display_name": "–£–Ω–∏—Å–µ–∫—Å"}
    ]
    
    for i, gender_data in enumerate(gender_values):
        gender_value = AttributeValue(
            attribute_id=gender_attr.id,
            value=gender_data["value"],
            display_name=gender_data["display_name"],
            sort_order=i,
            is_active=True
        )
        db.add(gender_value)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(attributes)} attribute definitions")
    return attributes

def assign_attributes_to_categories(db: Session, categories: List[Category], attributes: List[AttributeDefinition]):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    logger.info("Assigning attributes to categories...")
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã
    clothing_category = next((c for c in categories if c.slug == "clothing"), None)
    if not clothing_category:
        logger.warning("Clothing category not found")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞—Ç—Ä–∏–±—É—Ç—ã
    size_attr = next((a for a in attributes if a.code == "clothing_size"), None)
    color_attr = next((a for a in attributes if a.code == "color"), None)
    material_attr = next((a for a in attributes if a.code == "material"), None)
    gender_attr = next((a for a in attributes if a.code == "gender"), None)
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å"
    if size_attr:
        cat_attr = CategoryAttribute(
            category_id=clothing_category.id,
            attribute_id=size_attr.id,
            is_required=True,
            is_variant=True,  # –†–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã
            sort_order=1
        )
        db.add(cat_attr)
    
    if color_attr:
        cat_attr = CategoryAttribute(
            category_id=clothing_category.id,
            attribute_id=color_attr.id,
            is_required=True,
            is_variant=True,  # –¶–≤–µ—Ç —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã
            sort_order=2
        )
        db.add(cat_attr)
    
    if material_attr:
        cat_attr = CategoryAttribute(
            category_id=clothing_category.id,
            attribute_id=material_attr.id,
            is_required=False,
            is_variant=False,  # –ú–∞—Ç–µ—Ä–∏–∞–ª –ù–ï —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã
            sort_order=3
        )
        db.add(cat_attr)
    
    if gender_attr:
        cat_attr = CategoryAttribute(
            category_id=clothing_category.id,
            attribute_id=gender_attr.id,
            is_required=False,
            is_variant=False,  # –ü–æ–ª –ù–ï —Å–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã
            sort_order=4
        )
        db.add(cat_attr)
    
    # –¢–∞–∫–∂–µ –Ω–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    subcategories = ["mens-clothing", "womens-clothing"]
    for subcat_slug in subcategories:
        subcat = next((c for c in categories if c.slug == subcat_slug), None)
        if subcat and size_attr and color_attr:
            # –†–∞–∑–º–µ—Ä
            db.add(CategoryAttribute(
                category_id=subcat.id,
                attribute_id=size_attr.id,
                is_required=True,
                is_variant=True,
                sort_order=1
            ))
            # –¶–≤–µ—Ç
            db.add(CategoryAttribute(
                category_id=subcat.id,
                attribute_id=color_attr.id,
                is_required=True,
                is_variant=True,
                sort_order=2
            ))
    
    db.commit()
    logger.info("‚úÖ Attributes assigned to categories")

def create_test_products(db: Session, stores: List[Store], categories: List[Category], brands: List[Brand]):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    logger.info("Creating test products...")
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    official_store = next((s for s in stores if s.slug == "official-store"), None)
    mens_clothing = next((c for c in categories if c.slug == "mens-clothing"), None)
    nike_brand = next((b for b in brands if b.slug == "nike"), None)
    
    if not official_store or not mens_clothing or not nike_brand:
        logger.warning("Required objects not found for product creation")
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
    size_attr = db.query(AttributeDefinition).filter_by(code="clothing_size").first()
    color_attr = db.query(AttributeDefinition).filter_by(code="color").first()
    material_attr = db.query(AttributeDefinition).filter_by(code="material").first()
    gender_attr = db.query(AttributeDefinition).filter_by(code="gender").first()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—É—Ç–±–æ–ª–∫—É
    tshirt = Product(
        store_id=official_store.id,
        category_id=mens_clothing.id,
        brand_id=nike_brand.id,
        sku="NIKE-TSHIRT-001",
        name="Nike Dri-FIT –ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞",
        slug="nike-dri-fit-mens-tshirt",
        description="""
        –ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ Nike Dri-FIT –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –º—è–≥–∫–æ–π –≤–ª–∞–≥–æ–æ—Ç–≤–æ–¥—è—â–µ–π —Ç–∫–∞–Ω–∏, 
        –∫–æ—Ç–æ—Ä–∞—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç –≤–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫—Ä–æ–π –∏ 
        –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–µ–ª–∞—é—Ç —ç—Ç—É —Ñ—É—Ç–±–æ–ª–∫—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –¥–ª—è —Å–ø–æ—Ä—Ç–∞ –∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏.
        
        –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è Dri-FIT –æ—Ç–≤–æ–¥–∏—Ç –≤–ª–∞–≥—É –æ—Ç –∫–æ–∂–∏
        - –ú—è–≥–∫–∞—è –∏ –ª–µ–≥–∫–∞—è —Ç–∫–∞–Ω—å
        - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫—Ä–æ–π
        - –í—ã—à–∏—Ç—ã–π –ª–æ–≥–æ—Ç–∏–ø Nike
        """,
        short_description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ —Å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Dri-FIT",
        price=2990.00,
        compare_price=3990.00,
        status=ProductStatus.ACTIVE,
        visibility=ProductVisibility.PUBLISHED,
        track_inventory=True,
        stock_quantity=0,  # –°–∫–ª–∞–¥ –±—É–¥–µ—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
        low_stock_threshold=5,
        meta_title="Nike Dri-FIT –ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ - –ö—É–ø–∏—Ç—å –≤ Official Store",
        meta_description="–ú—É–∂—Å–∫–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞ Nike Dri-FIT —Å –≤–ª–∞–≥–æ–æ—Ç–≤–æ–¥—è—â–µ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π. –†–∞–∑–º–µ—Ä—ã S-XXL. –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 5000 —Ä—É–±.",
        tags=["nike", "—Å–ø–æ—Ä—Ç", "—Ñ—É—Ç–±–æ–ª–∫–∞", "dri-fit", "–Ω–æ–≤–∏–Ω–∫–∞"]
    )
    db.add(tshirt)
    db.flush()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –≤–∞—Ä–∏–∞–Ω—Ç–Ω—ã–µ)
    if material_attr:
        cotton_poly = db.query(AttributeValue).filter_by(
            attribute_id=material_attr.id,
            value="cotton_poly"
        ).first()
        if cotton_poly:
            db.add(ProductAttribute(
                product_id=tshirt.id,
                attribute_id=material_attr.id,
                attribute_value_id=cotton_poly.id
            ))
    
    if gender_attr:
        male = db.query(AttributeValue).filter_by(
            attribute_id=gender_attr.id,
            value="male"
        ).first()
        if male:
            db.add(ProductAttribute(
                product_id=tshirt.id,
                attribute_id=gender_attr.id,
                attribute_value_id=male.id
            ))
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤
    sizes = db.query(AttributeValue).filter_by(attribute_id=size_attr.id).order_by(AttributeValue.sort_order).all()
    colors = db.query(AttributeValue).filter_by(attribute_id=color_attr.id).all()
    
    # –í—ã–±–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏
    selected_colors = ["black", "white", "navy"]
    selected_color_values = [c for c in colors if c.value in selected_colors]
    
    variant_count = 0
    for color_value in selected_color_values:
        for size_value in sizes:
            # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
            variant = ProductVariant(
                product_id=tshirt.id,
                name=f"{color_value.display_name} {size_value.display_name}",
                sku=f"NIKE-TSHIRT-001-{color_value.value.upper()}-{size_value.value.upper()}",
                price=2990.00 if size_value.value != "xxl" else 3190.00,  # XXL –¥–æ—Ä–æ–∂–µ
                stock_quantity=random.randint(0, 20),  # –°–ª—É—á–∞–π–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                attributes={
                    "color": color_value.display_name,
                    "size": size_value.display_name,
                    "color_code": color_value.meta_data.get("hex", "#000000")
                },
                sort_order=variant_count,
                is_active=True
            )
            db.add(variant)
            db.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞
            # –¶–≤–µ—Ç
            db.add(ProductAttribute(
                product_id=tshirt.id,
                variant_id=variant.id,
                attribute_id=color_attr.id,
                attribute_value_id=color_value.id
            ))
            
            # –†–∞–∑–º–µ—Ä
            db.add(ProductAttribute(
                product_id=tshirt.id,
                variant_id=variant.id,
                attribute_id=size_attr.id,
                attribute_value_id=size_value.id
            ))
            
            variant_count += 1
    
    db.commit()
    logger.info(f"‚úÖ Created product with {variant_count} variants")
    return [tshirt]

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é seed_database
def seed_database():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –±–∞–∑–∞
        if db.query(User).count() > 0:
            logger.warning("Database already contains data. Skipping seed.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        users = create_test_users(db)
        categories = create_test_categories(db)
        brands = create_test_brands(db)
        stores = create_test_stores(db, users)
        attributes = create_test_attributes(db)
        assign_attributes_to_categories(db, categories, attributes)
        products = create_test_products(db, stores, categories, brands)
        
        logger.info("‚úÖ Database seeded successfully!")
        logger.info(f"Created: {len(users)} users, {len(stores)} stores, {len(products)} products")
        
    except Exception as e:
        logger.error(f"Error seeding database: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "reset":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        reset_db()
        seed_database()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –∑–Ω–∞—á–µ–Ω–∏—è
        check_enum_values()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
        init_db()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        seed_database()