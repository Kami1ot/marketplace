# app/init_db.py - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import logging
from sqlalchemy.orm import Session
from sqlalchemy import text
from datetime import datetime, timedelta
import random

from app.database import engine, Base, SessionLocal
from app.models import *
from app.core.security import get_password_hash

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("Creating database tables...")
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Tables created!")

def drop_db():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)"""
    logger.warning("Dropping all tables...")
    Base.metadata.drop_all(bind=engine)
    logger.info("‚úÖ All tables dropped!")

def reset_db():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.warning("Resetting database...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    drop_db()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    init_db()
    
    logger.info("‚úÖ Database reset complete!")

def create_test_users(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("Creating test users...")
    
    users = [
        {
            "email": "admin@example.com",
            "password": "admin123",
            "first_name": "Admin",
            "last_name": "User",
            "role": UserRole.ADMIN,
            "email_verified": True
        },
        {
            "email": "seller@example.com", 
            "password": "seller123",
            "first_name": "Test",
            "last_name": "Seller",
            "role": UserRole.SELLER,
            "email_verified": True
        },
        {
            "email": "buyer@example.com",
            "password": "buyer123", 
            "first_name": "Test",
            "last_name": "Buyer",
            "role": UserRole.CUSTOMER,
            "email_verified": True
        }
    ]
    
    created_users = []
    for user_data in users:
        password = user_data.pop("password")
        user = User(**user_data)
        user.password_hash = get_password_hash(password)
        db.add(user)
        created_users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = UserProfile(
            user=user,
            bio=f"I am a {user.role.value}",
            language="ru"
        )
        db.add(profile)
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if user.role == UserRole.CUSTOMER:
            address = UserAddress(
                user=user,
                type=AddressType.BOTH,
                label="–î–æ–º–∞—à–Ω–∏–π –∞–¥—Ä–µ—Å",
                country="–†–æ—Å—Å–∏—è",
                city="–ú–æ—Å–∫–≤–∞",
                street="—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è",
                building="1",
                postal_code="101000",
                is_default=True
            )
            db.add(address)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(created_users)} users")
    return created_users

def create_test_categories(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    logger.info("Creating test categories...")
    
    categories_data = [
        {"name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "slug": "electronics", "icon_url": "üì±"},
        {"name": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", "slug": "clothing", "icon_url": "üëï"},
        {"name": "–î–æ–º –∏ —Å–∞–¥", "slug": "home-garden", "icon_url": "üè†"},
        {"name": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "slug": "beauty-health", "icon_url": "üíÑ"},
        {"name": "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö", "slug": "sport", "icon_url": "‚öΩ"},
        {"name": "–ö–Ω–∏–≥–∏", "slug": "books", "icon_url": "üìö"},
    ]
    
    categories = []
    for cat_data in categories_data:
        category = Category(**cat_data, is_active=True)
        db.add(category)
        categories.append(category)
    
    db.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories = [
        {"name": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã", "slug": "smartphones", "parent_id": categories[0].id},
        {"name": "–ù–æ—É—Ç–±—É–∫–∏", "slug": "laptops", "parent_id": categories[0].id},
        {"name": "–ú—É–∂—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "slug": "mens-clothing", "parent_id": categories[1].id},
        {"name": "–ñ–µ–Ω—Å–∫–∞—è –æ–¥–µ–∂–¥–∞", "slug": "womens-clothing", "parent_id": categories[1].id},
    ]
    
    for subcat_data in subcategories:
        subcategory = Category(**subcat_data, is_active=True)
        db.add(subcategory)
        categories.append(subcategory)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(categories)} categories")
    return categories

def create_test_brands(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
    logger.info("Creating test brands...")
    
    brands_data = [
        {"name": "Apple", "slug": "apple", "website": "https://apple.com"},
        {"name": "Samsung", "slug": "samsung", "website": "https://samsung.com"},
        {"name": "Nike", "slug": "nike", "website": "https://nike.com"},
        {"name": "Adidas", "slug": "adidas", "website": "https://adidas.com"},
        {"name": "Sony", "slug": "sony", "website": "https://sony.com"},
    ]
    
    brands = []
    for brand_data in brands_data:
        brand = Brand(**brand_data, is_active=True)
        db.add(brand)
        brands.append(brand)
    
    db.commit()
    logger.info(f"‚úÖ Created {len(brands)} brands")
    return brands

def seed_database():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –±–∞–∑–∞
        if db.query(User).count() > 0:
            logger.warning("Database already contains data. Skipping seed.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        users = create_test_users(db)
        categories = create_test_categories(db)
        brands = create_test_brands(db)
        
        logger.info("‚úÖ Database seeded successfully!")
        
    except Exception as e:
        logger.error(f"Error seeding database: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def check_enum_values():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π enum"""
    logger.info("Checking enum values...")
    logger.info(f"UserRole values: {[role.value for role in UserRole]}")
    logger.info(f"UserStatus values: {[status.value for status in UserStatus]}")
    logger.info(f"AddressType values: {[addr_type.value for addr_type in AddressType]}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "reset":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        reset_db()
        seed_database()
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum –∑–Ω–∞—á–µ–Ω–∏—è
        check_enum_values()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç)
        init_db()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        seed_database()