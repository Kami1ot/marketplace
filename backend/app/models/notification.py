# app/models/notification.py
from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, ForeignKey, JSON, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from app.database import Base
import enum

class NotificationType(str, enum.Enum):
    ORDER_UPDATE = "order_update"           # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    PAYMENT_UPDATE = "payment_update"       # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    REVIEW_RECEIVED = "review_received"     # –ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤
    MESSAGE_RECEIVED = "message_received"   # –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    PROMOTION = "promotion"                 # –ê–∫—Ü–∏—è/—Å–∫–∏–¥–∫–∞
    SYSTEM = "system"                      # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    WISHLIST_SALE = "wishlist_sale"        # –°–∫–∏–¥–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    STOCK_ALERT = "stock_alert"            # –¢–æ–≤–∞—Ä –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏
    PRICE_DROP = "price_drop"              # –°–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
    STORE_UPDATE = "store_update"          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    PRODUCT_UPDATE = "product_update"       # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

class Notification(Base):
    __tablename__ = "notifications"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    type = Column(Enum(NotificationType), nullable=False, index=True)
    title = Column(String(255), nullable=False)
    content = Column(Text, nullable=True)
    data = Column(JSON, nullable=True)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ID –∑–∞–∫–∞–∑–∞, —Ç–æ–≤–∞—Ä–∞ –∏ —Ç.–¥.)
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è
    is_read = Column(Boolean, default=False, nullable=False, index=True)
    read_at = Column(DateTime(timezone=True), nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    created_at = Column(DateTime(timezone=True), server_default=func.now(), nullable=False)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user = relationship("User", back_populates="notifications")
    
    def __repr__(self):
        return f"<Notification(id={self.id}, user_id={self.user_id}, type='{self.type}', read={self.is_read})>"
    
    @property
    def is_unread(self):
        """–ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        return not self.is_read
    
    @property
    def hours_since_created(self):
        """–ß–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
        from datetime import datetime
        return int((datetime.now(self.created_at.tzinfo) - self.created_at).total_seconds() / 3600)
    
    @property
    def is_recent(self):
        """–ù–µ–¥–∞–≤–Ω–µ–µ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤)"""
        return self.hours_since_created < 24
    
    @property
    def is_old(self):
        """–°—Ç–∞—Ä–æ–µ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–±–æ–ª–µ–µ –Ω–µ–¥–µ–ª–∏)"""
        return self.hours_since_created > (24 * 7)
    
    @property
    def urgency_level(self):
        """–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        urgent_types = [
            NotificationType.ORDER_UPDATE,
            NotificationType.PAYMENT_UPDATE,
            NotificationType.MESSAGE_RECEIVED
        ]
        
        if self.type in urgent_types:
            return "high"
        elif self.type in [NotificationType.PROMOTION, NotificationType.WISHLIST_SALE]:
            return "medium"
        else:
            return "low"
    
    @property
    def icon(self):
        """–ò–∫–æ–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        icons = {
            NotificationType.ORDER_UPDATE: "üì¶",
            NotificationType.PAYMENT_UPDATE: "üí≥",
            NotificationType.REVIEW_RECEIVED: "‚≠ê",
            NotificationType.MESSAGE_RECEIVED: "üí¨",
            NotificationType.PROMOTION: "üéâ",
            NotificationType.SYSTEM: "‚öôÔ∏è",
            NotificationType.WISHLIST_SALE: "‚ù§Ô∏è",
            NotificationType.STOCK_ALERT: "üìà",
            NotificationType.PRICE_DROP: "üí∞",
            NotificationType.STORE_UPDATE: "üè™",
            NotificationType.PRODUCT_UPDATE: "üì¶"
        }
        return icons.get(self.type, "üîî")
    
    def mark_as_read(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        self.is_read = True
        self.read_at = func.now()
    
    def get_action_url(self):
        """–ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é"""
        if not self.data:
            return None
            
        if self.type == NotificationType.ORDER_UPDATE and 'order_id' in self.data:
            return f"/orders/{self.data['order_id']}"
        elif self.type == NotificationType.MESSAGE_RECEIVED and 'conversation_id' in self.data:
            return f"/conversations/{self.data['conversation_id']}"
        elif self.type in [NotificationType.WISHLIST_SALE, NotificationType.STOCK_ALERT, NotificationType.PRICE_DROP] and 'product_id' in self.data:
            return f"/products/{self.data['product_id']}"
        elif self.type == NotificationType.STORE_UPDATE and 'store_id' in self.data:
            return f"/stores/{self.data['store_id']}"
        elif self.type == NotificationType.REVIEW_RECEIVED and 'review_id' in self.data:
            return f"/reviews/{self.data['review_id']}"
        
        return None
    
    def get_related_object_id(self):
        """–ü–æ–ª—É—á–∏—Ç—å ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞"""
        if not self.data:
            return None
            
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–∏—Å–∫–∞ ID
        id_keys = ['order_id', 'product_id', 'store_id', 'conversation_id', 'review_id', 'user_id']
        
        for key in id_keys:
            if key in self.data:
                return self.data[key]
        
        return None
    
    @property
    def can_be_dismissed(self):
        """–ú–æ–∂–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ"""
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–µ –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
        return self.type != NotificationType.SYSTEM
    
    @property
    def requires_action(self):
        """–¢—Ä–µ–±—É–µ—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        action_required_types = [
            NotificationType.ORDER_UPDATE,
            NotificationType.PAYMENT_UPDATE,
            NotificationType.MESSAGE_RECEIVED
        ]
        return self.type in action_required_types